import numpy as np

from inverse_kinematics import InverseKinematicsSolver
from toolbox import array_almost_equal

class IK_package:
    def __init__(self, transform, joints):
        self.transform = transform
        self.joints = joints

ik_data = []
ik_data.append(IK_package(np.array(
[[-0.21761947,  0.94881404, -0.22889668, -0.06245582],
 [ 0.36793484, -0.13746779, -0.91963393,  0.4968983 ],
 [-0.9040275,  -0.28434932, -0.31918608, -0.09206035],
 [ 0. ,         0.     ,    0.      ,    1.        ]]), [-1.64863801143, 0.0897099235525, -0.300022098418, 0.202109127381, 1.01595615759, 0.194080612822]))

ik_data.append(IK_package(np.array(
[[ 0.02810449 ,0.15247492,-0.98790766, 0.31024742],
[0.17990972,-0.97293082,-0.14504521, 0.20484283],
[-0.98328156,-0.17365776,-0.05477545,-0.41888244],
 [ 0.      ,    0.   ,       0.    ,      1.        ]]), [-0.52098078172, -1.54287105876, -1.23743843966, 0.186750229963, 0.621860812486, 0.194080612822]))

ik_data.append(IK_package(np.array(
[[ 0.07306079,-0.70363886,-0.70679167, 0.26583007],
 [ 0.03463098, -0.70646839,0.70689681,-0.15111703],
 [-0.99672605,-0.07612333,-0.02724744,-0.42350791],
 [ 0.         , 0.      ,    0. ,         1.        ]]), [0.40282199136, -1.78372649554, -0.723438974952, 0.181688775133, 0.596204472481, 0.194080612822]))


ik_data.append(IK_package(np.array(
[[ 0.62396432,-0.44383976,-0.64317556, 0.43392448],
 [-0.06849906,-0.85094749, 0.52076506 ,-0.12480696],
 [-0.77844487 ,-0.28088189 ,-0.56136348, -0.14024868],
 [ 0.      ,    0.    ,      0.      ,    1.        ]]), [0.198618468877, -0.605280184592, -0.706509281207, 0.191986217719, 0.621860812486, 0.194080612822]))


ik_data.append(IK_package(np.array(
[[ 0.43035167, -0.54149892 , 0.72220244,  0.25778078],
 [-0.45564555, -0.82098476 ,-0.34405109, -0.25638816],
 [ 0.77922049 ,-0.18100537, -0.60004373 , 0.12618066],
 [ 0.       ,   0.   ,       0.       ,   1.        ]]), [0.645248224462, 1.60116505578, -0.198618468877, 0.156032435128, -0.621860812486, 0.194080612822]))

tollerance = .1

def compareToIK(data, IK_solver):
    """ test current position to IK solver """
    
    # gripper_to_base_transform = np.linalg.inv(self.transformation_base)* self.transformation_gripper
    # otherHand_to_base_transform = self.transformation_otherHand_base

    success, thetas = IK_solver.solve_kinematics(data.transform)
    thetas[0] = -thetas[0]
    print("IK Successful:", str(success))
    print("IK Output:", str(thetas.tolist()))
    current_angles = data.joints
    print("Current Robot thetas:", str(current_angles))
    print("IK matches thetas with", str(tollerance), ": ", str(array_almost_equal(thetas, current_angles, tollerance)))
    print("-----------------------------------------------------------")

ik_solver = InverseKinematicsSolver()

for data in ik_data:
    compareToIK(data, ik_solver)